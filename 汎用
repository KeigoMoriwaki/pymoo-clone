{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/KeigoMoriwaki/pymoo-clone/blob/main/%E6%B1%8E%E7%94%A8\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from IPython.display import clear_output\n",
        "!pip install -U pymoo\n",
        "clear_output()"
      ],
      "metadata": {
        "id": "tGg0g1S2sI9h"
      },
      "execution_count": 2,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "def make_1r():\n",
        "    J = [1, 2, 3, 4] # タスクID\n",
        "    p = {1: 1, 2: 3, 3: 2, 4: 2} # 各タスクの仕事量\n",
        "    P = [(1, 2), (1, 3), (2, 4)] # 各タスクの順序制約\n",
        "    R = [1, 2, 3] # 各ロボット種類のID\n",
        "    T = 6 # 総期間長\n",
        "    # 各期間ごとに仕事をスタートさせる費用，今回の問題では必要ない\n",
        "    # c = {(j, t): 1 * (t - 1 + p[j]) for j in J for t in range(1, T - p[j] + 2)}\n",
        "    # 各期間ごとにどの資源がどれだけ必要かが定義されるが，今回の問題では必要ない\n",
        "    # a = {\n",
        "    #     (1, 1, 0): 2,\n",
        "    #     (2, 1, 0): 2,\n",
        "    #     (2, 1, 1): 1,\n",
        "    #     (2, 1, 2): 1,\n",
        "    #     (3, 1, 0): 1,\n",
        "    #     (3, 1, 1): 1,\n",
        "    #     (4, 1, 0): 1,\n",
        "    #     (4, 1, 1): 2,\n",
        "    # }\n",
        "    # 各期間ごとにどのロボットがどれだけ働けるか（各ロボットの台数）\n",
        "    RUB = {\n",
        "        (1, 1): 2,\n",
        "        (1, 2): 2,\n",
        "        (1, 3): 2,\n",
        "        (1, 4): 2,\n",
        "        (1, 5): 2,\n",
        "        (1, 6): 2,\n",
        "        (1, 7): 2,\n",
        "        (2, 1): 1,\n",
        "        (2, 2): 1,\n",
        "        (2, 3): 1,\n",
        "        (2, 4): 1,\n",
        "        (2, 5): 1,\n",
        "        (2, 6): 1,\n",
        "        (2, 7): 1,\n",
        "        (3, 1): 1,\n",
        "        (3, 2): 1,\n",
        "        (3, 3): 1,\n",
        "        (3, 4): 1,\n",
        "        (3, 5): 1,\n",
        "        (3, 6): 1,\n",
        "        (3, 7): 1,\n",
        "    }\n",
        "\n",
        "    return (J, P, R, T, p, RUB)"
      ],
      "metadata": {
        "id": "w3z9InwqswhC"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from pymoo.algorithms.soo.nonconvex.ga import GA\n",
        "from pymoo.optimize import minimize\n",
        "from pymoo.operators.sampling.rnd import IntegerRandomSampling\n",
        "from pymoo.operators.crossover.ux import UniformCrossover\n",
        "from pymoo.operators.mutation.rm import ChoiceRandomMutation\n",
        "from pymoo.operators.crossover.sbx import SBX\n",
        "from pymoo.operators.mutation.pm import PM\n",
        "from pymoo.operators.repair.rounding import RoundingRepair\n",
        "\n",
        "def solve_problem(problem_data):\n",
        "    problem = ResourceConstrainedSchedulingProblem(problem_data)\n",
        "\n",
        "    # algorithm = GA(pop_size=100,\n",
        "    #                sampling=IntegerRandomSampling(),\n",
        "    #                mutation=ChoiceRandomMutation(),\n",
        "    #                crossover=UniformCrossover(),\n",
        "    #                eliminate_duplicates=True)\n",
        "    # 整数変数を探索するようにPMとSBXに切り上げ修復（RoundingRepair）を使うものを使用\n",
        "    algorithm = GA(pop_size=100,\n",
        "                   sampling=IntegerRandomSampling(),\n",
        "                   mutation=PM(prob=1.0, eta=3.0, vtype=float, repair=RoundingRepair()),\n",
        "                   crossover=SBX(prob=1.0, eta=3.0, vtype=float, repair=RoundingRepair()),\n",
        "                   eliminate_duplicates=True)\n",
        "\n",
        "    result = minimize(problem, algorithm, ('n_gen', 100), verbose=True)\n",
        "\n",
        "    return result"
      ],
      "metadata": {
        "id": "vGkg7CNt2N6H"
      },
      "execution_count": 4,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import copy\n",
        "from pymoo.core.problem import Problem\n",
        "\n",
        "class ResourceConstrainedSchedulingProblem(Problem):\n",
        "    # Parameters:\n",
        "    #     - J: set of jobs\n",
        "    #     - P: set of precedence constraints between jobs\n",
        "    #     - R: set of resources\n",
        "    #     - T: number of periods\n",
        "    #     - p[j]: processing time of job j\n",
        "    #     - a[j,r,t]: resource r usage for job j on period t (after job starts)\n",
        "    #     - RUB[r,t]: upper bound for resource r on period t\n",
        "\n",
        "    def __init__(self, problem_data):\n",
        "        self.J, self.P, self.R, self.T, self.p, self.RUB = problem_data\n",
        "        n_var = len(self.J) * self.T\n",
        "        super().__init__(n_var=n_var,\n",
        "                         n_obj=1,\n",
        "                         n_constr=1,\n",
        "                         xl=0,\n",
        "                         xu=len(self.R),\n",
        "                         type_var=int)\n",
        "\n",
        "    def _evaluate(self, x, out, *args, **kwargs):\n",
        "        # ここでxには100個体の全変数が入っている（個体群サイズ*変数長配列）\n",
        "        # 各個体を別々に考える（頑張れば一度に計算できるが分かりやすくするため）\n",
        "        finish_times = []\n",
        "        constraints = []\n",
        "        for ind in x:\n",
        "            schedule = ind.reshape((len(self.J), self.T))\n",
        "            # 目的関数（仕事の完了時間）\n",
        "            leftover = copy.deepcopy(self.p)\n",
        "            for t, s in enumerate(schedule.T):\n",
        "                for i, j in enumerate(s):\n",
        "                    if j != 0:\n",
        "                        leftover[i+1] = max(0, leftover[i+1]-1)\n",
        "                if sum(leftover.values()) == 0:\n",
        "                    break\n",
        "            finish_times.append(t)\n",
        "\n",
        "            # 各期間ごとにロボット数を超過していないか？\n",
        "            resource_constraints = 0\n",
        "            for t, s in enumerate(schedule.T):\n",
        "                n_worker = np.zeros(len(self.R))\n",
        "                for i, j in enumerate(s):\n",
        "                    if j != 0:\n",
        "                        n_worker[j-1] += 1\n",
        "                for r in range(len(self.R)):\n",
        "                    resource_constraints += min(0, self.RUB[(r+1, t+1)] - n_worker[r])\n",
        "            constraints.append(resource_constraints)\n",
        "\n",
        "        out[\"F\"] = finish_times\n",
        "        out[\"G\"] = constraints"
      ],
      "metadata": {
        "id": "ErR-wOQLsgyS"
      },
      "execution_count": 11,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "import numpy as np\n",
        "\n",
        "def plot_schedule(result, J, R, T):\n",
        "    schedule = result.X.reshape((len(J), T))\n",
        "\n",
        "    fig, ax = plt.subplots(figsize=(12, 6))\n",
        "    colors = plt.cm.get_cmap('tab10', len(J))\n",
        "\n",
        "    for j in range(len(J)):\n",
        "        for t in range(T):\n",
        "            if schedule[j, t] != 0:\n",
        "                robot = int(np.ceil(schedule[j, t]))  # 小数の場合、切り上げして整数にする\n",
        "                ax.broken_barh([(t, 1)], (robot - 1, 1), facecolors=(colors(j)))\n",
        "                ax.text(t + 0.5, robot - 0.5, f\"J{J[j]}\", ha='center', va='center', color='black')\n",
        "\n",
        "    ax.set_xlabel('Time')\n",
        "    ax.set_ylabel('Robot')\n",
        "    ax.set_yticks(np.arange(len(R)) + 0.5)\n",
        "    ax.set_yticklabels([f'R{r}' for r in R])\n",
        "    ax.set_xticks(np.arange(T + 1))\n",
        "    plt.show()"
      ],
      "metadata": {
        "id": "iYBuck4tIKiR"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "ZpKc_Bk4r7DO",
        "outputId": "d09136cb-a740-44cf-8a62-dc07e751d866"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "=================================================================================\n",
            "n_gen  |  n_eval  |     cv_min    |     cv_avg    |     f_avg     |     f_min    \n",
            "=================================================================================\n",
            "     1 |      100 |  0.000000E+00 |  0.000000E+00 |  3.0600000000 |  2.0000000000\n",
            "     2 |      200 |  0.000000E+00 |  0.000000E+00 |  2.1200000000 |  2.0000000000\n",
            "     3 |      300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "     4 |      400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "     5 |      500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "     6 |      600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "     7 |      700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "     8 |      800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "     9 |      900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    10 |     1000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    11 |     1100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    12 |     1200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    13 |     1300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    14 |     1400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    15 |     1500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    16 |     1600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    17 |     1700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    18 |     1800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    19 |     1900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    20 |     2000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    21 |     2100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    22 |     2200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    23 |     2300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    24 |     2400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    25 |     2500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    26 |     2600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    27 |     2700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    28 |     2800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    29 |     2900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    30 |     3000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    31 |     3100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    32 |     3200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    33 |     3300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    34 |     3400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    35 |     3500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    36 |     3600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    37 |     3700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    38 |     3800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    39 |     3900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    40 |     4000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    41 |     4100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    42 |     4200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    43 |     4300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    44 |     4400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    45 |     4500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    46 |     4600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    47 |     4700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    48 |     4800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    49 |     4900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    50 |     5000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    51 |     5100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    52 |     5200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    53 |     5300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    54 |     5400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    55 |     5500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    56 |     5600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    57 |     5700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    58 |     5800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    59 |     5900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    60 |     6000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    61 |     6100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    62 |     6200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    63 |     6300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    64 |     6400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    65 |     6500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    66 |     6600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    67 |     6700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    68 |     6800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    69 |     6900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    70 |     7000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    71 |     7100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    72 |     7200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    73 |     7300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    74 |     7400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    75 |     7500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    76 |     7600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    77 |     7700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    78 |     7800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    79 |     7900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    80 |     8000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    81 |     8100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    82 |     8200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    83 |     8300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    84 |     8400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    85 |     8500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    86 |     8600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    87 |     8700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    88 |     8800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    89 |     8900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    90 |     9000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    91 |     9100 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    92 |     9200 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    93 |     9300 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    94 |     9400 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    95 |     9500 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    96 |     9600 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    97 |     9700 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    98 |     9800 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "    99 |     9900 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "   100 |    10000 |  0.000000E+00 |  0.000000E+00 |  2.0000000000 |  2.0000000000\n",
            "[2.]\n",
            "[3 3 0 2 0 3 3 1 1 3 1 3 3 0 1 3 1 1 3 1 2 0 2 2]\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-12-a0d41af786a1>:8: MatplotlibDeprecationWarning: The get_cmap function was deprecated in Matplotlib 3.7 and will be removed two minor releases later. Use ``matplotlib.colormaps[name]`` or ``matplotlib.colormaps.get_cmap(obj)`` instead.\n",
            "  colors = plt.cm.get_cmap('tab10', len(J))\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "problem_data = make_1r()\n",
        "J, P, R, T, p, RUB = problem_data\n",
        "result = solve_problem(problem_data)\n",
        "\n",
        "print(result.F)\n",
        "print(result.X)\n",
        "plot_schedule(result, J, R, T)\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Y5iJnjzesGv3"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}